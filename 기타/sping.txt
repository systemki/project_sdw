	컴트롤러 - 일치하는 URI 이 있는지 확인하여 있으면 해당 코드를 실행

	src/main/webapp - 스프링의 기본이 되는 풀더
	src/main/webapp/resources -css/js/이미지등으 관리하는 풀더
	src/main/webapp/WEB_INF/spring - 스프링 설정 파일이 있는 풀더
	src/main/webapp/WEB_INF/views - 화면 파일(jsp)이 있는 풀더
	pom.xml - 필요한 기능을 연결(설치)하기 위한 파일
	설정 파일 spring풀더 

	스프링 -  자바로 된 웹 개발 프레임워크
	 - MVC 모델로 되어 있어 개발이 용이하다.	
	 - M :  Model - DB에 있는 정보를 Model을 통해 주고 받음
	 - V  :  View - 화면
	 - C  :  Controller


	 - gitignore : git으로 파일을 관리할때 신경안쓰고자 하는 파일을 gitignore에 입력
  	 하면 파일 내용이 바뀌어도 git에 뜨지 않게 하는 파일

	locallhost:8080/spring/test/test 		-  /test/test
	locallhost:8080/spring?name=홍길동	  	- /
	locallhost:8080/spring/test/test?name=홍길동	-  /test/test


	-@RequestMapping에 method가 지정되어 있으면 해당 방식만 처리,
	생략되어 있으면 GET,POST 둘다 처리 
	- 화면을 보여주려면 기본이 GET

	- 새로운 URI를 추가 할경우
	1. Controller에서 @RequstMapping이 포함된 메소드를 추가한 후 
	value에 원하는 URI경로로 수정, 메소드의 return부분에 원한느 화면을
	연결

	2. views풀더에 연결할 jsp를 추가 

	- 서버에서 화면으로 원하는 정보를 보내는 방법
	 1. 서버에서는 ModelAndView 클래스에서 제공하는 
	     addObject("화면에서 쓸 이름","보낼데이터"); 를 이용하여 데이터를 전송
	 2. 화면에서는 ${화면에서 쓸이름}으로 데이터를 받아서 처리 

	- 화면에서 서버로 원하는 정보를 보내는 방법1 - a태그를 이용 하는 방법
	- 화면에서는 a태그를 이용하여 원하는 URI를 지정 후 ?다음에 정보를 전달한다.
	   예 : localhost:8080/spring/signin?id=abc123&pw=abc123

	- 화면에서 서버로 원하는 정보를 보내는 방법2  - form태그를 이용하는 방법
	- form 태그에 input태그와 버튼을 이용하여 정보를 입력후 전송 버튼을 이용하여 
	  정보를 전달 

	 버튼을 이용하여 정보를 전달
	- 서버에서는 메소드의 매겨변수로 해당 정보를 받아옴
	 화면에서 서버로 데이터를 보낼때
	- 매개 변수가 일반변수나 클래스인 경우 (String, Integer, int 등)는 
	매개변수 명을 화면의 name과 맞춘다 
	매개변수가 클래스의 객체인 경우는 매개변수의 멤버 변수명과
	화면의 name을 맞춘다. 

	controller
	dao
	service
	vo


	@Autowired 는 @Inject 와 비슷, 차이점은 @Inject 내장 어노테이션이고 
	@Autowired 는 아님		

	@Autowired는 개체를 싱글톤으로 생성을 해줌 
	- 싱글톤 :  해당 클래스로 만들어진 객체는 오로지 하나만 존재하게 하는 클래스

	- 인터페이스로 객체로 생성 할수 없다.
	- 인터페이스는 구현 클래스를 이용하여 객체를 생성할 수 있다.

	xml에서 #{} ${}의 차이, #{}는 '값'dmfh "를 추가하여 데이터를 인식 하는데
	${} 값으로 변수(속성명)로 인식 


	- xml파일에서 쿼리문 작성 방법
	<태그명 id="" resultType="">
	</태그명>
	태그명: select, insert, update, delete로 원하는 쿼리문에 맞게 태그명을 선정 
	id : doa의 메소드명과 일치
	resultType : 태그명이 select일 때만 사용함
	 - return타입을 의미
 
	Membervo		- class 
	MemberController		- class

	Memberservice 		- interface
	Memberservicelmp 	- class

	MemberDAO		- interface
	MemberMapper		- xml

	signin.jsp에 로그인 화면을 구현하고, 로그인 정보를 입력해서 서버롤 데이터를
	전송한 후, 서버에서 전송된 데이터를 출력하세요.

	signup.jsp 파일을 생성한 후, 회원 가입 화면을 구현하고, 회원 정보를 입력해서
	서버로 데이터를 전송한 후, 서버에서 전소오딘 데이터를 출력하세요.


	
	
	1.	HomeController.java 먼저 수정 
	@RequestMapping(value = "/signup", method = RequestMethod.POST)
	public ModelAndView signupGet(ModelAndView mv) {
		mv.setViewName("signup");
		return mv;
	}	
	
	2.jsp만들기





https://stajun.tistory.com
